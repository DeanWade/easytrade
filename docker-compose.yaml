version: "3.4"

services:
  db:
    hostname: db
    container_name: db
    image: ${REGISTRY}/db:${TAG}
    restart: always
    environment:
      SA_PASSWORD: yourStrong(!)Password
    ports:
      - 1433:1433
    logging: &basic-logging
      driver: "json-file"
      options:
        max-file: "5"
        max-size: "10m"

  creator:
    hostname: contentcreator
    container_name: contentcreator
    image: ${REGISTRY}/contentcreator:${TAG}
    restart: always
    environment:
      MSSQL_CONNECTIONSTRING: jdbc:sqlserver://db:1433;database=TradeManagement;user=sa;password=yourStrong(!)Password;encrypt=false;trustServerCertificate=false;loginTimeout=30;
    depends_on:
      - db
    logging: *basic-logging

  manager:
    hostname: manager
    container_name: manager
    image: ${REGISTRY}/manager:${TAG}
    restart: always
    environment:
      MSSQL_CONNECTIONSTRING: Data Source=db;Initial Catalog=TradeManagement;Persist Security Info=True;User ID=sa;Password=yourStrong(!)Password
    depends_on:
      - db
    ports:
      - 8081:80
    logging: *basic-logging

  pricingservice:
    hostname: pricingservice
    container_name: pricingservice
    image: ${REGISTRY}/pricingservice:${TAG}
    ports:
      - 8083:80
    depends_on:
      - manager
      - rabbitmq
    environment:
      MANAGER_HOSTANDPORT: manager:80
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: userxxx
      RABBITMQ_PASSWORD: passxxx
    logging: *basic-logging

  brokerservice:
    hostname: brokerservice
    container_name: brokerservice
    image: ${REGISTRY}/brokerservice:${TAG}
    ports:
      - 8084:80
    depends_on:
      - accountservice
      - manager
      - pricingservice
    environment:
      MANAGER_HOSTANDPORT: manager:80
      ACCOUNTSERVICE_HOSTANDPORT: accountservice:8080
      PRICINGSERVICE_HOSTANDPORT: pricingservice:80
    logging: *basic-logging

  rabbitmq:
    hostname: rabbitmq
    container_name: rabbitmq
    image: ${REGISTRY}/rabbitmq:${TAG}
    ports:
      - 8082:15672
    logging: *basic-logging

  calculationservice:
    hostname: calculationservice
    container_name: calculationservice
    image: ${REGISTRY}/calculationservice:${TAG}
    depends_on:
      - rabbitmq
    logging: *basic-logging

  frontend:
    hostname: frontend
    container_name: frontend
    image: ${REGISTRY}/frontend:${TAG}
    depends_on:
      - brokerservice
      - loginservice
      - pricingservice
    ports:
      - 8085:3000
    logging: *basic-logging

  loginservice:
    hostname: loginservice
    container_name: loginservice
    image: ${REGISTRY}/loginservice:${TAG}
    restart: always
    environment:
      MSSQL_CONNECTIONSTRING: Data Source=db;Initial Catalog=TradeManagement;Persist Security Info=True;User ID=sa;Password=yourStrong(!)Password
    depends_on:
      - db
    ports:
      - 8086:80
    logging: *basic-logging

  frontendreverseproxy:
    hostname: frontendreverseproxy
    container_name: frontendreverseproxy
    image: ${REGISTRY}/frontendreverseproxy:${TAG}
    depends_on:
      - brokerservice
      - frontend
      - loginservice
      - pricingservice
    ports:
      - 80:80
    logging: *basic-logging

  headlessloadgen:
    hostname: headlessloadgen
    container_name: headlessloadgen
    image: gcr.io/dynatrace-demoability/headlessloadgen:latest
    depends_on:
      - frontendreverseproxy
    environment:
      EASY_TRADE_ADDRESS: frontendreverseproxy
      EASY_TRADE_PORT: 80
    logging: *basic-logging

  offerservice:
    hostname: offerservice
    container_name: offerservice
    image: ${REGISTRY}/offerservice:${TAG}
    depends_on:
      - loginservice
      - manager
    environment:
      LOGIN_SERVICE_PORT: 80
      LOGIN_SERVICE_BASE_URL: loginservice
      MANAGER_BASE_URL: manager
      MANAGER_PORT: 80
    ports:
      - 8087:8080
    logging: *basic-logging

  pluginservice:
    hostname: pluginservice
    container_name: pluginservice
    image: ${REGISTRY}/pluginservice:${TAG}
    depends_on:
      - offerservice
      - manager
    environment:
      OFFER_SERVICE__PORT: 8080
      OFFER_SERVICE__DOMAIN: offerservice
      MANAGER__PORT: 80
      MANAGER__DOMAIN: manager
    ports:
      - 8088:8080
    logging: *basic-logging

  accountservice:
    hostname: accountservice
    container_name: accountservice
    image: ${REGISTRY}/accountservice:${TAG}
    ports:
      - 8089:8080
    depends_on:
      - manager
    environment:
      MANAGER_HOSTANDPORT: manager:80
    logging: *basic-logging

  engine:
    hostname: engine
    container_name: engine
    image: ${REGISTRY}/engine:${TAG}
    ports:
      - 8090:8080
    depends_on:
      - brokerservice
      - manager
    environment:
      BROKER_HOSTANDPORT: brokerservice:80
    logging: *basic-logging

  aggregatorservice_1:
    hostname: aggregatorservice_1
    container_name: aggregatorservice_1
    image: ${REGISTRY}/aggregatorservice:${TAG}
    depends_on:
      - offerservice
    environment:
      NODE_ENV: production
      OFFER_SERVICE: offerservice:8080
      PLATFORM: dynatestsieger.at
      STARTER_PACKAGE_PROBABILITY: 0.6
      LIGHT_PACKAGE_PROBABILITY: 0.3
      PRO_PACKAGE_PROBABILITY: 0.1
    logging: *basic-logging

  aggregatorservice_2:
    hostname: aggregatorservice_2
    container_name: aggregatorservice_2
    image: ${REGISTRY}/aggregatorservice:${TAG}
    depends_on:
      - offerservice
    environment:
      NODE_ENV: production
      OFFER_SERVICE: offerservice:8080
      PLATFORM: tradeCom.co.uk
      STARTER_PACKAGE_PROBABILITY: 0.8
      LIGHT_PACKAGE_PROBABILITY: 0.2
      PRO_PACKAGE_PROBABILITY: 0
    logging: *basic-logging

  aggregatorservice_3:
    hostname: aggregatorservice_3
    container_name: aggregatorservice_3
    image: ${REGISTRY}/aggregatorservice:${TAG}
    depends_on:
      - offerservice
    environment:
      NODE_ENV: production
      OFFER_SERVICE: offerservice:8080
      PLATFORM: CryptoTrading.com
      FILTER: '["Crypto"]'
      MAXFEE: 0
      STARTER_PACKAGE_PROBABILITY: 0.5
      LIGHT_PACKAGE_PROBABILITY: 0.4
      PRO_PACKAGE_PROBABILITY: 0.1
    logging: *basic-logging

  aggregatorservice_4:
    hostname: aggregatorservice_4
    container_name: aggregatorservice_4
    image: ${REGISTRY}/aggregatorservice:${TAG}
    depends_on:
      - offerservice
    environment:
      NODE_ENV: production
      OFFER_SERVICE: offerservice:8080
      PLATFORM: CheapTrading.mi
      MAXFEE: 0
      STARTER_PACKAGE_PROBABILITY: 1
      LIGHT_PACKAGE_PROBABILITY: 0
      PRO_PACKAGE_PROBABILITY: 0
    logging: *basic-logging

  aggregatorservice_5:
    hostname: aggregatorservice_5
    container_name: aggregatorservice_5
    image: ${REGISTRY}/aggregatorservice:${TAG}
    depends_on:
      - offerservice
    environment:
      NODE_ENV: production
      OFFER_SERVICE: offerservice:8080
      PLATFORM: Stratton-oakmount.com
      FILTER: '["Shares"]'
      STARTER_PACKAGE_PROBABILITY: 0
      LIGHT_PACKAGE_PROBABILITY: 0.1
      PRO_PACKAGE_PROBABILITY: 0.9
    logging: *basic-logging
